@import '/src/common/modern-reset.css';
@import '/src/common/theme.css';
@import '/src/common/a11y.css';
@import '/src/common/base.css';
@import '/src/ui/components/button/button.css';

/* 라이트/다크모드 설정 */
:root {
  color-scheme: light dark;
}

body {
  margin: 20px;
  background: light-dark(#fff, #000);
  color: light-dark(#000, #fff);
}

.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(17.5rem, 1fr));
  grid-auto-rows: 18.75rem;
  gap: 1.25rem;
}

.case {
  border: 1px solid light-dark(#181818, #c2c2c2);
  padding: 2.5rem;

  button {
    border-radius: 0.5rem;
    padding: 0.5em 1rem;
  }

  .toggle-animation {
    background-color: #4263eb;
  }

  .toggle-animation.paused {
    background-color: #e03131;
  }

  .reset-animation {
    background-color: #15aabf;
  }

  .target-animation {
    margin-top: 2.5rem;
    margin-block-start: 2.5rem;
    font-size: 2rem;
    text-align: center;
    align-content: center;
    padding: 10px;
    border-radius: 8px;
    color: light-dark(#000, #fff);
    background: linear-gradient(135deg, #f7d67e, #ff9900);
  }
}

/* Fade Animation */
@keyframes fade {
  /* 시작점 */
  0%,
  100% {
    opacity: 1;
  }
  /* 중간지점 */
  50% {
    opacity: 0;
  }
  /* 종료지점 // 동일값 쓰는 포인트 있으면 묶어서 기재 가능*/
  /* 100% {
    opacity: 1;
  } */
}
/* keyframe에 정의해둔 애니메이션 사용. duration 필수로 줘야 함 */
.case-01 .target-animation {
  animation-name: fade;
  animation-duration: 2s;

  /* 반복수행 옵션 : infinite(계속실행) */
  animation-iteration-count: infinite;

  /* 다시 시작될 때의 모션 자연스럽게// 역재생 반복 
     -> 요걸 넣거나, 정의할 때 50%를 넣어서 반복할 지점을 생성해줘도 똑같은 효과 부여 가능*/
  /* alternate / normal / reverse / alternate-reverse */
  /* animation-direction: alternate; */

  /* 시작시간 지연 */
  /* animation-delay: 3s; */

  /* 실행시간의 조정(극적 효과) */
  animation-timing-function: linear;

  /* 애니메이션이 끝나도 그 스타일을 유지할지, 시작 전에 미리 적용할지를 정하는 옵션 
   none(initial) / forwards / backwards both */
  animation-fill-mode: forwards;

  /* shorthand 표기 : 앞에 2개 필수. 뒤에는 optional로 순서 상관 없음*/
  animation: fade 2s infinite 1s linear both;
  /* 바로 시작될 지, 멈췄다가 다른 버튼 등으로 제어해서 실행할 지 결정 */
  animation-play-state: paused;
}

/* Shrink Animation */
@keyframes shrink {
  0%,
  100% {
    width: 100%;
  }
  50% {
    width: 50%;
  }
}
/* ease-in-out: 처음/끝만 빠름 */
.case-02 .target-animation {
  animation: shrink 2s infinite ease-in-out both;
  animation-play-state: paused;
}

/* Bounce Animation */
@keyframes bounce {
  0%,
  100% {
    translate: 0 0;
  }
  50% {
    translate: 0 -20px;
  }
}
.case-03 .target-animation {
  animation: bounce 2s infinite ease-in-out;
  animation-play-state: paused;
}

/* Shake Animation */
@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(-15px);
  }
}
.case-04 .target-animation {
  animation: shake 3ms infinite ease-in-out;
  animation-play-state: paused;
}

/* Spin Animaion */
@keyframes spin {
  0% {
    transform: rotate(0turn);
  }
  100% {
    transform: rotate(1turn);
  }
}

.case-05 .target-animation {
  animation: spin 1.5ms infinite linear;
  animation-play-state: paused;

  /* 도형 모양 */
  width: 7.5rem;
  inline-size: 7.5rem;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  background: conic-gradient(
    rgb(255, 0, 0),
    rgb(255, 175, 2),
    rgb(255, 238, 0),
    rgb(0, 177, 68),
    rgb(70, 212, 255),
    rgb(11, 36, 255),
    rgb(205, 6, 255)
  );
}

/* Pulse Ainimation */
@keyframes pulse {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.2);
  }
}
.case-06 .target-animation {
  animation: pulse 1.5ms infinite ease-in-out;
  animation-play-state: paused;
}

/* Flip Animation */
@keyframes flip {
  0% {
    /* perspective가 원근감 더해줌 숫자 클수록 멀리 있는 것! */
    /* 보통 400~600 많이 쓴다고 함 */
    transform: perspective(400px) rotateY(0);
  }
  100% {
    transform: perspective(400px) rotateY(360deg);
  }
}
.case-07 .target-animation {
  animation: flip 2s infinite ease-in-out;
  animation-play-state: paused;
}

/* Wobble Animation */
@keyframes wobble {
  0%,
  100% {
    transform: translateX(0%) rotate(0deg);
  }
  15% {
    transform: translateX(-15px) rotate(-5deg);
  }
  30% {
    transform: translateX(10px) rotate(3deg);
  }
  45% {
    transform: translateX(-10px) rotate(-3deg);
  }
  60% {
    transform: translateX(5px) rotate(2deg);
  }
  75% {
    transform: translateX(-5px) rotate(-1deg);
  }
}
.case-08 .target-animation {
  animation: wobble 2s infinite ease-in-out paused;
  /* animation-play-state: paused; */
}

/* Glow Animation */
@keyframes glow {
  0%,
  100% {
    box-shadow: 0 0 5px light-dark(rgb(0 0 0 /0.5), rgb(255 255 255 /0.5));
  }
  50% {
    box-shadow: 0 0 10px light-dark(rgb(0 0 0 /0.6), rgb(255 255 255 /0.6));
  }
}
.case-09 .target-animation {
  animation: glow 2s infinite ease-in-out;
  animation-play-state: paused;
}

/* Light Rotation */
/* 선언한 변수를 애니메이션에 넣어서 동적으로 바꿀 수 없기 때문에
property로 선언해서 쓰도록 함 */
@property --rotation {
  syntax: '<angle>';
  inherits: false;
  initial-value: 0deg;
}

@keyframes rotate {
  from {
    --rotation: 0deg;
  }
  to {
    --rotation: 360deg;
  }
}
.case-10 .target-animation {
  width: 150px;
  aspect-ratio: 1/1;
  position: relative;

  &::before,
  &::after {
    --rotation: 0deg;
    box-sizing: content-box;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    inset: 50%;
    translate: -50% -50%;
    background: conic-gradient(from var(--rotation), red, blue, red);
    padding: 1px;
    z-index: -1;
    border-radius: 8px;
    animation: rotate 1s infinite linear;
    animation-play-state: paused;
  }

  &::before {
    filter: blur(15px);
  }
}
