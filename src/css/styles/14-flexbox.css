@import '/src/common/theme.css';

html,
body {
  font-family: SUIT, sans-serif;
}

body *,
body *::before,
body *::after {
  box-sizing: border-box;
}

/* flex 파헤치기 */
/* 플렉스 컨테이너 관련 속성 */

.case-01 {
  /* padding: 10px; */
  border: 1px solid red;

  display: flex;

  /* flex-direction는 column/column-reverse/row/row-reverse 4가지 속성값 가짐 */
  /* flex-direction: row; */
  /* 줄바꿈 설정-shrink 동작 여부 결정 (nowrwap->줄바꿈 ㄴㄴ) */
  /* flex-wrap: nowrap; */

  inline-size: 622px;
  block-size: 522px;

  /*  flex-flow : flex-direction+flex-wrap 숏핸드 표기 */
  flex-flow: row wrap;
  /* justify-content의 속성값중 사이공백 3개
     space-between(바깥에는 여백x 안쪽 동일 여백)
     space-around(안쪽 여백의 반만큼 양 바깥쪽에 여백 줌)
     space-evenly(안쪽 여백만큼 양 바깥쪽에 여백 줌)  */
  justify-content: space-evenly;

  /* align-items 기본: stretch // 박스에 맞게 늘어남 */
  /* align-items: center -> 박스 안에서 가운데 정렬*/
  /* align-content: center -> 라인이 여러줄일 때~ 부모 전체 안에서 가운데 정렬*/
  align-items: center;
  align-content: center;
  /* row-gap, column-gap을 함께 지정할 수 있는 단축 속성 */
  gap: 20px 40px;

  [class*='item'] {
    /* margin-block: 10px; */
    border: 1px solid currentColor;
    background: var(--pastel-yellow);
    /* inline-size: 100px;
    block-size: 100px; */
    text-align: center;
    align-content: center;
    /* line-height 크게 주면 마치 가운데정렬처럼 보이게 함.
     글꼴마다 위치 다를 수 있고 한 줄일 때만 가능. 
     기존에 세로 기준 가운데 정렬을 지원하지 않을 때 쓰던 트릭임 */
    /* line-height: 100px; */
  }

  .item1 {
    /* inline-size: 200px; */
    font-size: 48px;
  }
  .item2 {
    font-size: 30px;
  }
  .item3 {
  }
}

/* 플렉스 아이템 관련 속성 */
.case-02 {
  border: 1px solid green;
  width: 502px;
  inline-size: 502px;

  display: flex;
  flex-flow: row nowrap;

  /* class가 item으로 시작하는 것 */
  [class^='item'] {
    border: 1px solid currentColor;
    /* width: 100px;
    inline-size: 100px;
    height: 100px;
    block-size: 100px; */
    text-align: center;
    align-content: center;
    /* flex-box의 기본 크기. 
    flex-flow가 row일 떄는 width, inline-size처럼 작용하고 
    columns일 때는 height, block-size처럼 작용함 */
    /* 참고: auto 값을 가지지 않은 flex-basis와 width(flex-direction: column인 경우 height) 값을 동시에 적용한 경우 flex-basis가 우선함!! 
      -> flex-basis는 강하다. 일찐이다 */
    /* flex-basis content일때 내용물만큼의 폭을 가짐*/
    flex-basis: 200px;
    /* flex-grow에 1을 주면 전체 부모공간을 꽉 채움. 디폴트는 0 */
    flex-grow: 0;
    /* 공간이 모자르면 알아서 줄이는 것. 디폴트는 1 */
    flex-shrink: 1;
    /* grow, shrink, basis 단축표기 */
    flex: 0 1 200px;

    /* odd(홀수), even(짝수) 값을 줘서 일부만 부르기*/
    &:nth-child(even) {
      order: -1;
      /* flex-grow: 2; */
    }
  }

  /* 모든 flex 아이템의 기본 order는 0번. 
     내 자리: 0인 것// 같은 0번일 때는 마크업 순서대로 나오고, 하나가 -1이 되면 맨앞으로 가는 것! */
  /* .item4 {
    order: 0;
  } */
}

.case-01re {
  border: 1px solid red;
  background: black;
  display: flex;
  inline-size: 622px;
  block-size: 522px;

  flex-flow: row wrap;
  justify-content: space-evenly;

  align-items: center;
  align-content: center;

  [class*='item'] {
    color: white;
    font-weight: 800;

    text-align: center;
    align-content: center;
  }

  .item1 {
    font-size: 48px;
  }
  .item2 {
    font-size: 30px;
  }
  .item3 {
    font-size: 15px;
  }
}
